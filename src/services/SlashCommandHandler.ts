import { Client, Collection, REST, Routes, Interaction } from 'discord.js';
import { SlashCommand } from '../types/index.ts';
import { slashCommands } from '../slashCommands/index.ts';
import { config } from '../config/index.ts';

export class SlashCommandHandler {
    private client: Client;
    private commands: Collection<string, SlashCommand>;

    constructor(client: Client) {
        this.client = client;
        this.commands = new Collection();
        this.loadCommands();
    }

    private loadCommands(): void {
        console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${slashCommands.length} slash –∫–æ–º–∞–Ω–¥:`);
        slashCommands.forEach(command => {
            this.commands.set(command.data.name, command);
            console.log(`  - /${command.data.name}: ${command.data.description}`);
        });
    }

    public async registerCommands(): Promise<void> {
        try {
            const rest = new REST({ version: '10' }).setToken(config.token);
            const commandData = slashCommands.map(command => command.data.toJSON());

            console.log('üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é slash –∫–æ–º–∞–Ω–¥...');
            console.log(`üìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${commandData.map(cmd => cmd.name).join(', ')}`);

            await rest.put(
                Routes.applicationCommands(config.clientId),
                { body: commandData }
            );

            console.log(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ${commandData.length} slash –∫–æ–º–∞–Ω–¥`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ slash –∫–æ–º–∞–Ω–¥:', error);
            throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        }
    }

    public async handleInteraction(interaction: Interaction): Promise<void> {
        if (!interaction.isChatInputCommand()) return;

        const command = this.commands.get(interaction.commandName);
        if (!command) return;

        try {
            await command.execute(interaction);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è slash –∫–æ–º–∞–Ω–¥—ã ${interaction.commandName}:`, error);
            
            const errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!';
            
            if (interaction.replied || interaction.deferred) {
                await interaction.followUp({ content: errorMessage, ephemeral: true });
            } else {
                await interaction.reply({ content: errorMessage, ephemeral: true });
            }
        }
    }

    public getCommands(): Collection<string, SlashCommand> { return this.commands; }
} 