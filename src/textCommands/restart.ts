import { ITextCommand } from '../types/index.ts';
import { spawn } from 'child_process';
import process from 'node:process';

export const restart: ITextCommand = {
    name: 'restart',
    description: '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)',
    usage: 'restart',
    execute: async (message) => {
        const ownerId = '837705388262031401';
        if (message.author.id !== ownerId) {
            await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
            return;
        }
        
        const replyMessage = await message.reply('üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
        console.log('üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');

        try {
            // Check if the command was run with --dev flag
            const isDev = process.argv.includes('--dev') || process.argv.includes('dev');
            const restartCommand = isDev ? 'npm run dev' : 'npm run restart';
            
            console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É: ${restartCommand}`);
            
            // Start new process
            const child = spawn(restartCommand, {
                shell: true,
                detached: true,
                stdio: 'inherit',
                cwd: process.cwd()
            });

            // Handle errors
            child.on('error', (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
                replyMessage.edit('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.');
            });

            // Detach new process from parent
            child.unref();

            // End current process
            await replyMessage.edit('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!');
            console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!');
            
            // Give time to send message
            setTimeout(() => {
                console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...');
                process.exit(0);
            }, 2000);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
            await replyMessage.edit('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.');
        }
    },
}; 