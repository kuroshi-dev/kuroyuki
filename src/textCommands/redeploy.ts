import { ITextCommand } from '../types/index.ts';

export const redeploy: ITextCommand = {
    name: 'redeploy',
    description: '–ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç slash –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)',
    usage: 'redeploy',
    execute: async (message) => {
        const ownerId = '837705388262031401';
        if (message.author.id !== ownerId) {
            await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
            return;
        }
        
        const replyMessage = await message.reply('üîÑ –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è slash –∫–æ–º–∞–Ω–¥...');
        console.log('üîÑ –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è slash –∫–æ–º–∞–Ω–¥...');

        try {
            // Receive slash command handler from client
            const client = message.client;
            const slashCommandHandler = (client as { bot?: { getSlashCommandHandler(): { registerCommands(): Promise<void> } } }).bot?.getSlashCommandHandler();
            
            if (!slashCommandHandler) {
                throw new Error('SlashCommandHandler –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // Redeploy commands
            await slashCommandHandler.registerCommands();
            
            await replyMessage.edit('‚úÖ Slash –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
            console.log('‚úÖ Slash –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
            await replyMessage.edit('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥.');
        }
    },
}; 